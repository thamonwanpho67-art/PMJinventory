const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function deleteSampleAssets() {
  try {
    console.log('üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö Sample Assets ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentCount = await prisma.asset.count();
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentCount);
    
    const sampleCodes = ['NB001', 'PRJ001', 'MIC001', 'CAM001', 'TAB001'];
    
    console.log('\nüìã Sample Assets ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    const sampleAssets = await prisma.asset.findMany({
      where: {
        code: {
          in: sampleCodes
        }
      }
    });
    
    sampleAssets.forEach((asset, index) => {
      console.log(`${index + 1}. ${asset.name} (${asset.code})`);
    });
    
    console.log(`\nüóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${sampleAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`);
    
    let totalDeleted = 0;
    for (const code of sampleCodes) {
      const deleted = await prisma.asset.deleteMany({
        where: { code }
      });
      console.log(`- ‡∏•‡∏ö ${deleted.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ code: ${code}`);
      totalDeleted += deleted.count;
    }
    
    const finalCount = await prisma.asset.count();
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log(`- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalDeleted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${finalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (finalCount === 204) {
      console.log('\nüéØ ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏£‡∏¥‡∏á 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

deleteSampleAssets();