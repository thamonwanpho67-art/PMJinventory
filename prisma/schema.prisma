generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String
  password           String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  phone              String?
  loans              Loan[]
  supplyTransactions SupplyTransaction[]

  @@map("users")
}

model Asset {
  id             String      @id @default(cuid())
  name           String
  code           String      @unique
  description    String?
  category       String?
  location       String?
  status         AssetStatus @default(AVAILABLE)
  imageUrl       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  quantity       Int         @default(1)
  assetCode      String?
  costCenter     String?
  price          Float?
  accountingDate DateTime?
  loans          Loan[]
}

model Loan {
  id         String     @id @default(cuid())
  assetId    String
  userId     String
  status     LoanStatus @default(PENDING)
  borrowedAt DateTime?
  dueAt      DateTime?
  returnedAt DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quantity   Int        @default(1)
  borrowDate DateTime   @default(now())
  costCenter String?
  note       String?
  asset      Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Supply {
  id           String              @id @default(cuid())
  name         String
  description  String?
  category     String
  unit         String
  quantity     Int                 @default(0)
  minStock     Int                 @default(0)
  unitPrice    Float?
  supplier     String?
  location     String?
  status       SupplyStatus        @default(AVAILABLE)
  imageUrl     String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions SupplyTransaction[]

  @@map("supplies")
}

model SupplyTransaction {
  id              String                @id @default(cuid())
  supplyId        String
  userId          String
  transactionType SupplyTransactionType
  quantity        Int
  remainingStock  Int
  unitPrice       Float?
  totalAmount     Float?
  notes           String?
  department      String?
  approvedBy      String?
  createdAt       DateTime              @default(now())
  supply          Supply                @relation(fields: [supplyId], references: [id], onDelete: Cascade)
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("supply_transactions")
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  targetRole  Role             @default(ADMIN)
  relatedId   String?
  relatedType String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("notifications")
}

enum AssetStatus {
  AVAILABLE
  DAMAGED
  OUT_OF_STOCK
}

enum Role {
  ADMIN
  USER
}

enum LoanStatus {
  PENDING
  APPROVED
  RETURNED
  REJECTED
}

enum SupplyStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum SupplyTransactionType {
  IN
  OUT
}

enum NotificationType {
  LOAN_REQUEST
  LOAN_APPROVED
  LOAN_REJECTED
  LOAN_RETURNED
  LOW_STOCK
  SYSTEM
}
