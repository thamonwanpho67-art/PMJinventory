const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

async function bulkImportAssets() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentCount = await prisma.asset.count();
    console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
    const jsonData = JSON.parse(fs.readFileSync('public/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô.json', 'utf8'));
    console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON:', jsonData.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    console.log('\\nüóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
    await prisma.asset.deleteMany({});
    console.log('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à');
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    function convertBuddhistToGregorian(buddhistDateStr) {
      if (!buddhistDateStr) return new Date();
      
      try {
        const [day, month, buddhistYear] = buddhistDateStr.split('/');
        const gregorianYear = parseInt(buddhistYear) - 543;
        return new Date(gregorianYear, parseInt(month) - 1, parseInt(day));
      } catch (error) {
        return new Date();
      }
    }
    
    console.log('\\nüì• ‡πÄ‡∏£‡∏¥‡πà‡∏° Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    let imported = 0;
    let errors = 0;
    
    // Import ‡∏ó‡∏µ‡∏•‡∏∞ batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    const batchSize = 50;
    const batches = [];
    
    for (let i = 0; i < jsonData.length; i += batchSize) {
      batches.push(jsonData.slice(i, i + batchSize));
    }
    
    for (const [batchIndex, batch] of batches.entries()) {
      console.log(`Processing batch ${batchIndex + 1}/${batches.length}...`);
      
      const batchData = batch.map(item => {
        const accountingDate = convertBuddhistToGregorian(item['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠']);
        const assetCode = item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] || `ASSET-${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}`;
        
        return {
          name: item['‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'] || `‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}`,
          code: assetCode,
          description: item['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'] || null,
          category: item['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] || '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          location: item['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'] || null,
          assetCode: item['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå(GFMIS)#S. No.'] || null,
          price: item['‡∏£‡∏≤‡∏Ñ‡∏≤'] ? parseFloat(item['‡∏£‡∏≤‡∏Ñ‡∏≤']) : null,
          accountingDate: accountingDate,
          status: 'AVAILABLE',
          quantity: 1
        };
      });
      
      try {
        await prisma.asset.createMany({
          data: batchData,
          skipDuplicates: true
        });
        imported += batchData.length;
      } catch (error) {
        console.error(`Error in batch ${batchIndex + 1}:`, error.message);
        errors++;
      }
    }
    
    console.log('\\n‚úÖ Import ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('- ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', imported, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- Batch ‡∏ó‡∏µ‡πà Error:', errors, 'batches');
    
    const finalCount = await prisma.asset.count();
    console.log('- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°:', finalCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    console.log('\\nüéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...');
    
    const sampleAssets = [
      {
        name: '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Å Dell Latitude',
        code: 'LAPTOP-001',
        description: '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏ô‡πä‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
        location: '‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏≠‡∏ó‡∏µ ‡∏ä‡∏±‡πâ‡∏ô 2',
        status: 'AVAILABLE',
        quantity: 1,
        accountingDate: new Date('2023-01-15')
      },
      {
        name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå HP LaserJet',
        code: 'PRINTER-001',
        description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥',
        category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå',
        location: '‡∏´‡πâ‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 1',
        status: 'AVAILABLE',
        quantity: 2,
        accountingDate: new Date('2024-03-20')
      },
      {
        name: '‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏±‡∏Å',
        code: 'DESK-001',
        description: '‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏±‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
        category: '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå',
        location: '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£',
        status: 'AVAILABLE',
        quantity: 1,
        accountingDate: new Date('2022-06-10')
      }
    ];
    
    for (const asset of sampleAssets) {
      try {
        await prisma.asset.create({ data: asset });
        console.log(\`+ ‡πÄ‡∏û‡∏¥‡πà‡∏°: \${asset.name}\`);
      } catch (error) {
        // Skip if duplicate
      }
    }
    
    const veryFinalCount = await prisma.asset.count();
    console.log('\\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', veryFinalCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

bulkImportAssets();