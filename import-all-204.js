const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
function convertBuddhistToGregorian(buddhistDateStr) {
  if (!buddhistDateStr) return null;
  
  try {
    const dateStr = buddhistDateStr.toString();
    const parts = dateStr.split('/');
    
    if (parts.length !== 3) return null;
    
    const day = parseInt(parts[0]);
    const month = parseInt(parts[1]);
    const buddhistYear = parseInt(parts[2]);
    
    if (isNaN(day) || isNaN(month) || isNaN(buddhistYear)) return null;
    
    const gregorianYear = buddhistYear - 543;
    
    return new Date(gregorianYear, month - 1, day);
  } catch (error) {
    console.error('Date conversion error:', error);
    return null;
  }
}

async function importAll204Assets() {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentCount = await prisma.asset.count();
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentCount);
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
    console.log('\nüìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON...');
    const jsonData = fs.readFileSync('./public/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô.json', 'utf8');
    const allAssets = JSON.parse(jsonData);
    
    console.log('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON:', allAssets.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    if (allAssets.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON');
      return;
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà sample
    console.log('\nüßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
    await prisma.asset.deleteMany({
      where: {
        code: {
          notIn: ['NB001', 'PRJ001', 'MIC001', 'CAM001', 'TAB001']
        }
      }
    });
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    
    console.log('\n‚¨ÜÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...');
    
    let imported = 0;
    let skipped = 0;
    
    // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ duplicate
    for (let i = 0; i < allAssets.length; i++) {
      const item = allAssets[i];
      
      try {
        const accountingDate = convertBuddhistToGregorian(item['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠']);
        const assetCode = item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] && item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] !== 'nan' 
          ? item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] 
          : `ASSET-${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}-${Date.now()}`;
        
        const assetData = {
          name: item['‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'] || `‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}`,
          code: assetCode,
          description: item['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'] || null,
          category: item['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] || '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          location: item['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'] || null,
          assetCode: item['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå(GFMIS)#S. No.'] || null,
          price: item['‡∏£‡∏≤‡∏Ñ‡∏≤'] ? parseFloat(item['‡∏£‡∏≤‡∏Ñ‡∏≤']) : null,
          accountingDate: accountingDate,
          status: 'AVAILABLE',
          quantity: 1
        };
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ code ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existing = await prisma.asset.findUnique({
          where: { code: assetCode }
        });
        
        if (!existing) {
          await prisma.asset.create({
            data: assetData
          });
          imported++;
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          if (imported % 20 === 0) {
            console.log(`üìà ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${imported}/${allAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
          }
        } else {
          skipped++;
        }
        
      } catch (error) {
        console.error(`‚ùå Error importing item ${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}:`, error.message);
        skipped++;
      }
    }
    
    const finalCount = await prisma.asset.count();
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
    console.log(`- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON: ${allAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${imported} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ (‡∏ã‡πâ‡∏≥): ${skipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${finalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (finalCount >= 200) {
      console.log('\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('\n‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON');
    }
    
    console.log('\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
    const latestAssets = await prisma.asset.findMany({
      take: 5,
      orderBy: { id: 'desc' },
      select: {
        name: true,
        code: true,
        category: true,
        accountingDate: true
      }
    });
    
    latestAssets.forEach((asset, index) => {
      const year = asset.accountingDate ? asset.accountingDate.getFullYear() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      console.log(`${index + 1}. ${asset.name} (‡∏õ‡∏µ: ${year})`);
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importAll204Assets();