const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testNotificationSystem() {
  try {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table ‡πÅ‡∏•‡∏∞ count ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    const notificationCount = await prisma.notification.count();
    const loanCount = await prisma.loan.count();
    console.log(`- Notifications: ${notificationCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`- Loans: ${loanCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    console.log('\nüîî ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    
    const testNotifications = [
      {
        title: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà',
        message: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Ç‡∏≠‡∏¢‡∏∑‡∏° Notebook Dell Inspiron',
        type: 'LOAN_REQUEST',
        targetRole: 'ADMIN'
      },
      {
        title: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        message: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏° Projector ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
        type: 'LOAN_APPROVED',
        targetRole: 'USER'
      },
      {
        title: '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô',
        message: '‡∏ô‡∏≤‡∏¢ A ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô Microphone ‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß',
        type: 'LOAN_RETURNED',
        targetRole: 'ADMIN'
      }
    ];
    
    for (let i = 0; i < testNotifications.length; i++) {
      const notif = testNotifications[i];
      try {
        const created = await prisma.notification.create({
          data: notif
        });
        console.log(`‚úÖ ${i + 1}. ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${notif.title} (ID: ${created.id})`);
      } catch (error) {
        console.log(`‚ùå ${i + 1}. ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${notif.title} - ${error.message}`);
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìã ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    const allNotifications = await prisma.notification.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    allNotifications.forEach((notif, index) => {
      const status = notif.isRead ? '‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : 'üî¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô';
      const time = new Date(notif.createdAt).toLocaleString('th-TH');
      console.log(`${index + 1}. ${notif.title} - ${notif.type} ${status} (${time})`);
    });
    
    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ${allNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    const unreadCount = allNotifications.filter(n => !n.isRead).length;
    console.log(`üî¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô: ${unreadCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNotificationSystem();