const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

async function investigateData() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...\n');
    
    // 1. ‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentCount = await prisma.asset.count();
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON file
    const jsonData = JSON.parse(fs.readFileSync('public/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô.json', 'utf8'));
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON file:', jsonData.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö asset codes ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const existingCodes = await prisma.asset.findMany({
      select: { code: true },
      orderBy: { code: 'asc' }
    });
    
    console.log('\nüè∑Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
    existingCodes.slice(0, 10).forEach((asset, index) => {
      console.log(`${index + 1}. ${asset.code}`);
    });
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    const assetsGroupedByDate = await prisma.asset.groupBy({
      by: ['createdAt'],
      _count: {
        id: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log('\nüìÖ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    assetsGroupedByDate.forEach(group => {
      const date = new Date(group.createdAt).toLocaleDateString('th-TH');
      console.log(`${date}: ${group._count.id} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON vs Database
    console.log('\nüîÑ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON vs Database:');
    
    const jsonCodes = jsonData.map(item => 
      item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] || `ASSET-${item['‡∏•‡∏≥‡∏î‡∏±‡∏ö']}`
    );
    
    const dbCodes = existingCodes.map(asset => asset.code);
    
    const missingCodes = jsonCodes.filter(code => !dbCodes.includes(code));
    console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:', missingCodes.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    if (missingCodes.length > 0) {
      console.log('üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
      missingCodes.slice(0, 5).forEach((code, index) => {
        console.log(`${index + 1}. ${code}`);
      });
    }
    
    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    console.log('\nüö® ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏:');
    
    if (currentCount === 70) {
      console.log('üí° ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:');
      console.log('  1. Database ‡∏ñ‡∏π‡∏Å reset ‡∏ï‡∏≠‡∏ô migrate notifications');
      console.log('  2. Seed script ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (70 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å seed.ts)');
      console.log('  3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å import ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤');
    }
    
    // 7. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    console.log('\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    console.log('  1. ‡∏£‡∏±‡∏ô bulk import ‡πÉ‡∏´‡∏°‡πà');
    console.log('  2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ API import ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö');
    console.log('  3. ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô seed script ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

investigateData();