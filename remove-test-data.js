const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function removeTestData() {
  try {
    console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö test data...\n');
    
    const totalBefore = await prisma.asset.count();
    console.log(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö: ${totalBefore} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ assetCode ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "#"
    const testDataAssets = await prisma.asset.findMany({
      where: {
        assetCode: {
          startsWith: '#'
        }
      },
      select: {
        id: true,
        name: true,
        assetCode: true
      }
    });
    
    console.log(`üéØ ‡∏û‡∏ö test data ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ${testDataAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (testDataAssets.length > 0) {
      console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
      testDataAssets.slice(0, 10).forEach((asset, index) => {
        console.log(`${index + 1}. ${asset.name} (${asset.assetCode})`);
      });
      
      if (testDataAssets.length > 10) {
        console.log(`... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${testDataAssets.length - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      }
      
      console.log('\nüóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏∏‡∏î
      let deletedCount = 0;
      for (const asset of testDataAssets) {
        try {
          await prisma.asset.delete({
            where: { id: asset.id }
          });
          deletedCount++;
          
          if (deletedCount % 10 === 0) {
            console.log(`   ‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${deletedCount}/${testDataAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
          }
        } catch (error) {
          console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${asset.name}: ${error.message}`);
        }
      }
      
      const totalAfter = await prisma.asset.count();
      
      console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
      console.log(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö: ${totalBefore} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö: ${totalAfter} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      if (totalAfter === 204) {
        console.log('üéâ ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß!');
      } else if (totalAfter < 204) {
        console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡∏≤‡∏î ${204 - totalAfter} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      } else {
        console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏Å‡∏¥‡∏ô ${totalAfter - 204} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      }
      
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö test data ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö');
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

removeTestData();