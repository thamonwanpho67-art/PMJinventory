const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function investigateExtra21() {
  try {
    const total = await prisma.asset.count();
    console.log(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: 204 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`‚ûï ‡πÄ‡∏Å‡∏¥‡∏ô: ${total - 204} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô test data ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô test data:');
    
    // 1. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ code (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô test data)
    const noCodeAssets = await prisma.asset.findMany({
      where: {
        OR: [
          { code: { equals: null } },
          { code: { equals: '' } },
          { code: { contains: 'test', mode: 'insensitive' } },
          { name: { contains: 'test', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        name: true,
        code: true,
        createdAt: true,
        category: true
      }
    });
    
    console.log(`üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ code ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ 'test': ${noCodeAssets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    noCodeAssets.forEach((asset, index) => {
      console.log(`  ${index + 1}. ${asset.name} (code: ${asset.code || 'null'})`);
    });
    
    // 2. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ name ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà code ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    const duplicateNames = await prisma.asset.groupBy({
      by: ['name'],
      _count: { name: true },
      having: {
        name: { _count: { gt: 1 } }
      }
    });
    
    console.log(`\nüìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: ${duplicateNames.length} ‡∏ä‡∏∑‡πà‡∏≠`);
    
    for (const dup of duplicateNames.slice(0, 10)) {
      console.log(`\n"${dup.name}" ‡∏°‡∏µ ${dup._count.name} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`);
      const assets = await prisma.asset.findMany({
        where: { name: dup.name },
        select: { id: true, code: true, assetCode: true, createdAt: true }
      });
      
      assets.forEach((asset, index) => {
        const date = new Date(asset.createdAt).toLocaleDateString('th-TH');
        console.log(`  ${index + 1}. Code: ${asset.code}, AssetCode: ${asset.assetCode}, Created: ${date}`);
      });
    }
    
    // 3. ‡∏´‡∏≤ category ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    const categoryStats = await prisma.asset.groupBy({
      by: ['category'],
      _count: { category: true },
      orderBy: { _count: { category: 'desc' } }
    });
    
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏° category:');
    categoryStats.forEach(cat => {
      console.log(`  ${cat.category}: ${cat._count.category} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // 4. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô bulk import ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
    const recentBulkImports = await prisma.asset.groupBy({
      by: ['createdAt'],
      _count: { id: true },
      having: {
        id: { _count: { gte: 5 } } // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      },
      orderBy: { _count: { id: 'desc' } }
    });
    
    console.log('\n‚ö° Bulk imports ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
    for (const bulk of recentBulkImports) {
      const date = new Date(bulk.createdAt).toLocaleString('th-TH');
      console.log(`${date}: ${bulk._count.id} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      if (bulk._count.id > 10) {
        const assets = await prisma.asset.findMany({
          where: { createdAt: bulk.createdAt },
          select: { name: true, code: true },
          take: 5
        });
        
        console.log('  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
        assets.forEach((asset, index) => {
          console.log(`    ${index + 1}. ${asset.name} (${asset.code})`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

investigateExtra21();