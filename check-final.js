const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkAssets() {
  try {
    console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ===\n');
    
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
    const totalCount = await prisma.asset.count();
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', totalCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const availableCount = await prisma.asset.count({ where: { status: 'AVAILABLE' } });
    const damagedCount = await prisma.asset.count({ where: { status: 'DAMAGED' } });
    const outOfStockCount = await prisma.asset.count({ where: { status: 'OUT_OF_STOCK' } });
    
    console.log('\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:');
    console.log('- ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (AVAILABLE):', availableCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏ä‡∏≥‡∏£‡∏∏‡∏î (DAMAGED):', damagedCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏´‡∏°‡∏î (OUT_OF_STOCK):', outOfStockCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
    const loanCount = await prisma.loan.count();
    const pendingLoans = await prisma.loan.count({ where: { status: 'PENDING' } });
    const approvedLoans = await prisma.loan.count({ where: { status: 'APPROVED' } });
    
    console.log('\nüìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:');
    console.log('- ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', loanCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:', pendingLoans, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß:', approvedLoans, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    const currentDate = new Date();
    const sevenYearsAgo = new Date(currentDate.getFullYear() - 7, currentDate.getMonth(), currentDate.getDate());
    
    const oldAssets = await prisma.asset.count({
      where: {
        accountingDate: {
          lt: sevenYearsAgo
        }
      }
    });
    
    const newAssets = totalCount - oldAssets;
    
    console.log('\nüìÖ ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå:');
    console.log('- ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏õ‡∏µ:', oldAssets, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏õ‡∏µ:', newAssets, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log('\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):');
    const latestAssets = await prisma.asset.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        name: true,
        code: true,
        category: true,
        status: true,
        accountingDate: true
      }
    });
    
    latestAssets.forEach((asset, index) => {
      const accountingYear = asset.accountingDate ? asset.accountingDate.getFullYear() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      console.log(`${index + 1}. ${asset.name}`);
      console.log(`   ‡∏£‡∏´‡∏±‡∏™: ${asset.code} | ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${asset.category} | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${asset.status} | ‡∏õ‡∏µ: ${accountingYear}`);
    });
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAssets();