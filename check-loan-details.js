const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkLoanDetails() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...\n');
  
  try {
    const loans = await prisma.loan.findMany({
      include: {
        asset: { select: { name: true, code: true } },
        user: { select: { name: true, email: true } }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:');
    console.log('- ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', loans.length);
    console.log('- PENDING:', loans.filter(l => l.status === 'PENDING').length);
    console.log('- APPROVED:', loans.filter(l => l.status === 'APPROVED').length);
    console.log('- RETURNED:', loans.filter(l => l.status === 'RETURNED').length);
    console.log('- REJECTED:', loans.filter(l => l.status === 'REJECTED').length);
    
    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    loans.forEach((loan, i) => {
      console.log(`\n${i+1}. ${loan.asset.name} (${loan.asset.code})`);
      console.log(`   ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: ${loan.user.name || loan.user.email}`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${loan.status}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠: ${loan.createdAt}`);
      console.log(`   ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: ${loan.dueDate || loan.dueAt || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${loan.borrowedAt || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${loan.returnedAt || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô'}`);
      console.log(`   ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${loan.note || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    });
    
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞:');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RETURNED ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ returnedAt
    const returnedButNoDate = loans.filter(l => l.status === 'RETURNED' && !l.returnedAt);
    if (returnedButNoDate.length === 0) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ RETURNED ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ returnedAt');
    } else {
      console.log('‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ RETURNED ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ returnedAt:');
      returnedButNoDate.forEach((loan, i) => {
        console.log(`   ${i+1}. ${loan.asset.name} - ID: ${loan.id}`);
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ returnedAt ‡πÅ‡∏ï‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà RETURNED
    const hasDateButNotReturned = loans.filter(l => l.returnedAt && l.status !== 'RETURNED');
    if (hasDateButNotReturned.length === 0) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ returnedAt ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RETURNED');
    } else {
      console.log('‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ returnedAt ‡πÅ‡∏ï‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà RETURNED:');
      hasDateButNotReturned.forEach((loan, i) => {
        console.log(`   ${i+1}. ${loan.asset.name} - Status: ${loan.status} - returnedAt: ${loan.returnedAt}`);
      });
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkLoanDetails().catch(console.error);