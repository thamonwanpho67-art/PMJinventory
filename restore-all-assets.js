const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
function convertBuddhistToGregorian(buddhistDateStr) {
  if (!buddhistDateStr) return null;
  
  try {
    const dateStr = buddhistDateStr.toString();
    const parts = dateStr.split('/');
    
    if (parts.length !== 3) return null;
    
    const day = parseInt(parts[0]);
    const month = parseInt(parts[1]);
    const buddhistYear = parseInt(parts[2]);
    
    if (isNaN(day) || isNaN(month) || isNaN(buddhistYear)) return null;
    
    const gregorianYear = buddhistYear - 543;
    
    return new Date(gregorianYear, month - 1, day);
  } catch (error) {
    console.error('Date conversion error:', error);
    return null;
  }
}

async function restoreAllAssets() {
  try {
    console.log('=== ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentAssets = await prisma.asset.count();
    console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentAssets);
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
    console.log('\nüìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON...');
    const jsonData = fs.readFileSync('./public/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô.json', 'utf8');
    const allAssets = JSON.parse(jsonData);
    
    console.log('üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON:', allAssets.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    if (allAssets.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON');
      return;
    }
    
    console.log('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
    // ‡∏•‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏ß‡πâ‡∏ô sample data)
    await prisma.asset.deleteMany({
      where: {
        code: {
          not: {
            in: ['NB001', 'PRJ001', 'MIC001', 'CAM001', 'TAB001']
          }
        }
      }
    });
    
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    
    console.log('\n‚¨ÜÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...');
    
    let imported = 0;
    let skipped = 0;
    
    // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô batch ‡πÄ‡∏•‡πá‡∏Å‡πÜ
    const batchSize = 5;
    const batches = [];
    for (let i = 0; i < allAssets.length; i += batchSize) {
      batches.push(allAssets.slice(i, i + batchSize));
    }
    
    console.log('üî¢ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô', batches.length, 'batch');
    
    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      console.log('‚öôÔ∏è Processing batch', (batchIndex + 1) + '/' + batches.length + '...');
      
      for (const item of batch) {
        try {
          const accountingDate = convertBuddhistToGregorian(item['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠']);
          const assetCode = item['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå'] || 'ASSET-' + item['‡∏•‡∏≥‡∏î‡∏±‡∏ö'];
          
          const assetData = {
            name: item['‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'] || '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ' + item['‡∏•‡∏≥‡∏î‡∏±‡∏ö'],
            code: assetCode,
            description: item['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'] || null,
            category: item['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] || '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            location: item['‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'] || null,
            assetCode: item['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå(GFMIS)#S. No.'] || null,
            price: item['‡∏£‡∏≤‡∏Ñ‡∏≤'] ? parseFloat(item['‡∏£‡∏≤‡∏Ñ‡∏≤']) : null,
            accountingDate: accountingDate,
            status: 'AVAILABLE',
            quantity: 1
          };
          
          await prisma.asset.create({
            data: assetData
          });
          
          imported++;
          
        } catch (error) {
          console.error('‚ùå Error importing item ' + item['‡∏•‡∏≥‡∏î‡∏±‡∏ö'] + ':', error.message);
          skipped++;
        }
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      if (batchIndex % 5 === 0 || batchIndex === batches.length - 1) {
        console.log('üìà Progress: ' + imported + ' imported, ' + skipped + ' skipped');
      }
    }
    
    const finalCount = await prisma.asset.count();
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ:');
    console.log('- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON:', allAssets.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', imported, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ:', skipped, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('- ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', finalCount, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    console.log('\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
    const latestAssets = await prisma.asset.findMany({
      take: 3,
      orderBy: { id: 'desc' },
      select: {
        name: true,
        code: true,
        category: true,
        accountingDate: true
      }
    });
    
    latestAssets.forEach((asset, index) => {
      const year = asset.accountingDate ? asset.accountingDate.getFullYear() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      console.log((index + 1) + '. ' + asset.name + ' (‡∏õ‡∏µ: ' + year + ')');
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreAllAssets();