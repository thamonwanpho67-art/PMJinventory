const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkNotificationUpdates() {
  console.log('üîî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...\n');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const notifications = await prisma.notification.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:');
    console.log('- ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', notifications.length);
    console.log('- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô:', notifications.filter(n => !n.isRead).length);
    console.log('- ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß:', notifications.filter(n => n.isRead).length);
    
    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
    notifications.forEach((notification, i) => {
      console.log(`${i+1}. ${notification.title}`);
      console.log(`   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${notification.message}`);
      console.log(`   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${notification.type}`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${notification.isRead ? '‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô'}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${notification.createdAt}`);
      console.log('');
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loans ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const loans = await prisma.loan.findMany({
      include: {
        asset: { select: { name: true, code: true } },
        user: { select: { name: true, email: true } }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ loans ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    console.log('- ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', loans.length);
    console.log('- PENDING:', loans.filter(l => l.status === 'PENDING').length);
    console.log('- APPROVED:', loans.filter(l => l.status === 'APPROVED').length);
    console.log('- RETURNED:', loans.filter(l => l.status === 'RETURNED').length);
    console.log('- REJECTED:', loans.filter(l => l.status === 'REJECTED').length);
    
    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î loans:');
    loans.forEach((loan, i) => {
      console.log(`${i+1}. ${loan.asset.name}`);
      console.log(`   ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: ${loan.user.name || loan.user.email}`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${loan.status}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠: ${new Date(loan.createdAt).toLocaleString('th-TH')}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${loan.borrowedAt ? new Date(loan.borrowedAt).toLocaleString('th-TH') : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}`);
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${loan.returnedAt ? new Date(loan.returnedAt).toLocaleString('th-TH') : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô'}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkNotificationUpdates().catch(console.error);